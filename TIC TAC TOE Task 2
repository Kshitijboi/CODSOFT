#include <iostream>
#include <vector>
#include <cstdlib>  // For clear screen function

using namespace std;

// Function declarations
void displayBoard(const vector<vector<char>>& board);
bool makeMove(vector<vector<char>>& board, char player, int position);
bool checkWin(const vector<vector<char>>& board, char player);
bool checkDraw(const vector<vector<char>>& board);
void clearScreen();
bool playAgain();

int main() {
    char currentPlayer = 'X';
    vector<vector<char>> board(3, vector<char>(3, ' '));

    do {
        clearScreen();
        displayBoard(board);

        // Get player move
        int position;
        cout << "Player " << currentPlayer << ", enter your move (1-9): ";
        cin >> position;

        // Make the move
        if (makeMove(board, currentPlayer, position)) {
            // Check for win
            if (checkWin(board, currentPlayer)) {
                clearScreen();
                displayBoard(board);
                cout << "Player " << currentPlayer << " wins! Congratulations!" << endl;
                break;
            }

            // Check for draw
            if (checkDraw(board)) {
                clearScreen();
                displayBoard(board);
                cout << "It's a draw!" << endl;
                break;
            }

            // Switch players
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        } else {
            cout << "Invalid move. Please try again." << endl;
        }

    } while (playAgain());

    cout << "Thanks for playing Tic-Tac-Toe! Goodbye!" << endl;

    return 0;
}

// Function definitions
void displayBoard(const vector<vector<char>>& board) {
    cout << "-------------" << endl;
    for (int i = 0; i < 3; ++i) {
        cout << "| ";
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j] << " | ";
        }
        cout << endl << "-------------" << endl;
    }
}

bool makeMove(vector<vector<char>>& board, char player, int position) {
    if (position >= 1 && position <= 9) {
        int row = (position - 1) / 3;
        int col = (position - 1) % 3;

        if (board[row][col] == ' ') {
            board[row][col] = player;
            return true;
        }
    }
    return false;
}

bool checkWin(const vector<vector<char>>& board, char player) {
    // Check rows and columns
    for (int i = 0; i < 3; ++i) {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
            (board[0][i] == player && board[1][i] == player && board[2][i] == player)) {
            return true;
        }
    }

    // Check diagonals
    if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
        (board[0][2] == player && board[1][1] == player && board[2][0] == player)) {
        return true;
    }

    return false;
}

bool checkDraw(const vector<vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row) {
            if (cell == ' ') {
                return false; // If there is any empty cell, the game is not a draw
            }
        }
    }
    return true; // All cells are filled, and no player has won - it's a draw
}

void clearScreen() {
    // Clear the screen (works on Windows and Unix-like systems)
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

bool playAgain() {
    char response;
    cout << "Do you want to play again? (y/n): ";
    cin >> response;
    return (response == 'y' || response == 'Y');
}
